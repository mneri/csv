/*
 * Copyright 2018 Massimo Neri <hello@mneri.me>
 *
 * This file is part of mneri/csv.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package me.mneri.csv.reader;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * A csv line which is generated by {@link CsvReader}. This class provides getter methods
 * ({@link RecyclableCsvLine#getBoolean}, {@link RecyclableCsvLine#getLong}, and so on) for retrieving column values.
 * Instances of this class shouldn't be used outside the scope of the method they're provided to because they may be
 * cleaned and reused by {@link CsvReader}.
 *
 * @author Massimo Neri &lt;<a href="mailto:hello@mneri.me">hello@mneri.me</a>&gt;
 */
public interface RecyclableCsvLine {
    /**
     * Return the value of the field at the specified index as {@link BigDecimal}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    BigDecimal getBigDecimal(int i);

    /**
     * Return the value of the field at the specified index as {@link BigInteger}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    BigInteger getBigInteger(int i);

    /**
     * Return the value of the field at the specified index as {@link BigInteger} in the radix specified by the second
     * argument.
     *
     * @param i The index of the field.
     * @param radix The radix to be used.
     * @return The value of the field.
     */
    BigInteger getBigInteger(int i, int radix);

    /**
     * Return the value of the field at the specified index as {@link Boolean}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Boolean getBoolean(int i);

    /**
     * Return the value of the field at the specified index as {@link Double}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Double getDouble(int i);

    /**
     * Return the number of fields in this line.
     *
     * @return The number of fields.
     */
    int getFieldCount();

    /**
     * Return the value of the field at the specified index as {@link Float}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Float getFloat(int i);

    /**
     * Return the value of the field at the specified index as {@link Integer}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Integer getInteger(int i);

    /**
     * Return the value of the field at the specified index as {@link Integer} in the radix specified by the second
     * argument. The characters in the string must all be digits of the specified radix, except that the first character
     * may be an ASCII minus sign {@code '-'} an ASCII plus sign {@code '+'}.
     *
     * @param i     The index of the field.
     * @param radix The radix to be used.
     * @return The value of the field.
     */
    Integer getInteger(int i, int radix);

    /**
     * Return the value of the field at the specified index as {@link Long}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Long getLong(int i);

    /**
     * Return the value of the field at the specified index as {@link Long} in the radix specified by the second
     * argument. The characters in the string must all be digits of the specified radix, except that the first character
     * may be an ASCII minus sign {@code '-'} an ASCII plus sign {@code '+'}.
     *
     * @param i     The index of the field.
     * @param radix The radix to be used.
     * @return The value of the field.
     */
    Long getLong(int i, int radix);

    /**
     * Return the value of the field at the specified index as {@link Short}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    Short getShort(int i);

    /**
     * Return the value of the field at the specified index as {@link Short} in the radix specified by the second
     * argument. The characters in the string must all be digits of the specified radix, except that the first character
     * may be an ASCII minus sign {@code '-'} an ASCII plus sign {@code '+'}.
     *
     * @param i     The index of the field.
     * @param radix The radix to be used.
     * @return The value of the field.
     */
    Short getShort(int i, int radix);

    /**
     * Return the value of the field at the specified index as {@link String}.
     *
     * @param i The index of the field.
     * @return The value of the field.
     */
    String getString(int i);
}
